---
import { Image } from "astro:assets";

import CaseStudyLayout from "../../layouts/CaseStudyLayout.astro";
import CaseStudyCallout from "../../components/CaseStudyCallout.astro";
import netlifyImage from "../../images/netlify@2x.png";
import vercelImage from "../../images/vercel@2x.png";
import accountProfileModalTypeImage from "../../images/account-profile-modal-type@2x.png";
import inlineFullScreenImage from "../../images/inline-full-screen@2x.png";
import colorPickerStatesImage from "../../images/color-picker-states@2x.png";
import settingsSidebarsImage from "../../images/settings-sidebars@2x.png";
import dataFeedsImage from "../../images/data-feeds@2x.png";
import teamMembersImage from "../../images/team-members@2x.png";
import switcherNewProjectImage from "../../images/switcher-new-project@2x.png";
import settingsSidebarTweaksImage from "../../images/settings-sidebar-tweaks@2x.png";
---

<CaseStudyLayout
  title="Redesigning Vero 2.0 Settings"
  headline="Redesigning Vero 2.0 Settings"
>
  <CaseStudyCallout
    description="In Vero 2.0, the settings experience was confusing and spread out. Users had trouble managing accounts, projects, and preferences without getting lost. I led the redesign of the entire settings system to make it easier to use, more consistent, and ready to scale."
  />

  <h2>The Problem</h2>
  <ul>
    <li>
      The settings section was fragmented, making it hard to manage projects,
      accounts, and user preferences.
    </li>
    <li>
      Several key settings weren't yet available in Vero 2.0 and had to be
      migrated from the legacy platform.
    </li>
    <li>There was no clear structure or consistent design.</li>
    <li>
      The frontend was being rewritten in <a
        href="https://nextjs.org/"
        target="_blank"
        rel="noopener noreferrer">Next.js</a
      >, replacing the older <a
        href="https://emberjs.com/"
        target="_blank"
        rel="noopener noreferrer">Ember</a
      >
      setup, which required rethinking how settings were structured, implemented,
      and migrated.
    </li>
  </ul>
  <p>This created frustration for both customers and internal teams.</p>

  <h2>Goals</h2>
  <ul>
    <li>Organize all settings into a clear, logical structure.</li>
    <li>Improve navigation and clarity.</li>
    <li>Use consistent design patterns for every setting type.</li>
    <li>Build a scalable system for future features.</li>
  </ul>
  <h2>Process</h2>
  <h3>Research</h3>
  <p>
    Collaborated with the Head of Product to conduct a comprehensive audit of
    all existing settings across user roles and project types. We identified key
    gaps, overlaps, and usability issues that were creating friction. To guide
    our approach, we also reviewed how tools in adjacent industries—such as
    Netlify and Vercel—organised their settings, drawing inspiration from proven
    patterns.
  </p>

  <div class="-mx-10 grid grid-cols-2 gap-10">
    <figure class="!my-0">
      <Image
        class="rounded-3xl outline outline-black/5"
        src={netlifyImage}
        alt="Screenshot of Netlify for competitor analysis"
      />

      <figcaption>Screenshot of Netlify for competitor analysis</figcaption>
    </figure>

    <figure class="!my-0">
      <Image
        class="rounded-3xl outline outline-black/5"
        src={vercelImage}
        alt="Screenshot of Vercel for competitor analysis"
      />

      <figcaption>Screenshot of Vercel for competitor analysis</figcaption>
    </figure>
  </div>

  <h3>Exploring designs</h3>

  <p>
    We have a Sketch library our our components and I explored different mid to
    hi-fidelity mockups—testing different ways to group and present the settings
    sidebar. I shared these iterations regularly internally to gather feedback
    early. This collaborative process helped me evaluate trade-offs due to
    balancing business goals or technical constraints.
  </p>

  <ul>
    <li>
      <strong>Modal vs inline for profile settings:</strong> Should profiles
      open in a modal for quick access, or be embedded inline within the
      settings view?
    </li>
    <li>
      <strong>Inline vs full-screen views:</strong> Should settings open up
      full-screen so the new settings could also be used in Vero 1.0?
    </li>
  </ul>

  <figure class="-mx-10">
    <Image
      class="rounded-4xl bg-cyan-50"
      src={accountProfileModalTypeImage}
      alt="Account profile modal type"
    />

    <figcaption>
      Srolling vs tabbed navigation in the account & profile modal
    </figcaption>
  </figure>

  <figure class="-mx-10">
    <Image
      class="rounded-4xl bg-yellow-50"
      src={inlineFullScreenImage}
      alt="Inline settings vs full-screen settings"
    />

    <figcaption>Inline settings vs full-screen settings</figcaption>
  </figure>

  <div class="-mx-10 grid grid-cols-1 gap-8 md:grid-cols-3 md:gap-10">
    <figure class="col-span-1 !my-0 md:col-span-2">
      <Image
        class="rounded-3xl bg-cyan-50"
        src={settingsSidebarsImage}
        alt="Settings sidebar exploration"
      />

      <figcaption>Settings sidebar exploration</figcaption>
    </figure>
    <figure class="col-span-1 !my-0">
      <Image
        class="rounded-3xl bg-cyan-50"
        src={colorPickerStatesImage}
        alt="Color picker state"
      />

      <figcaption>Color picker state mockups</figcaption>
    </figure>
  </div>

  <figure class="-mx-10">
    <Image
      class="rounded-4xl bg-yellow-50"
      src={switcherNewProjectImage}
      alt="Switcher new project"
    />

    <figcaption>Adding a new project from the switcher</figcaption>
  </figure>

  <h3>Refining design</h3>

  <p>
    I refined the settings UI to balance usability, visual consistency, and
    technical constraints. While the new settings section was build for Next.js
    , the broader app still ran on Ember, so I ensured the new designs aligned
    visually with the legacy UI.
  </p>

  <p>
    I made small improvements during implementation—like adjusting spacing,
    clarifying navigation states—to create a more consistent, scalable
    experience.
  </p>
  <p>
    Some features were stripped back based on business goals. Less critical
    settings were trimmed back or hidden to focus on core functionality and
    deliver a faster, more reliable launch. This allowed us to move faster while
    focusing on the functionality that mattered most to our users.
  </p>

  <div class="-mx-10 grid grid-cols-1 gap-8 md:grid-cols-3 md:gap-10">
    <figure class="col-span-1 !my-0">
      <div class="overflow-hidden rounded-3xl bg-cyan-50">
        <Image
          class="rounded-3xl drop-shadow-xl"
          src={dataFeedsImage}
          alt="Data feeds"
        />
      </div>

      <figcaption>Data feeds</figcaption>
    </figure>
    <figure class="col-span-1 !my-0 md:col-span-2">
      <div class="overflow-hidden rounded-3xl bg-cyan-50">
        <Image
          class="rounded-3xl drop-shadow-xl"
          src={teamMembersImage}
          alt="Team members"
        />
      </div>
      <figcaption>Team members</figcaption>
    </figure>
  </div>

  <h2>Release and iterate</h2>

  <p>
    After release, we received feedback that the sidebar in the settings section
    felt visually disconnected from the rest of the app—due to differences in
    width and styling compared to the non-settings sidebar.
  </p>
  <p>
    We responded by standardising the layout and aligning the styles of the
    settings sidebar to improve visual consistency.
  </p>

  <figure class="-mx-10">
    <div class="overflow-hidden rounded-4xl bg-yellow-50">
      <Image
        class="drop-shadow-xl"
        src={settingsSidebarTweaksImage}
        alt="Settings sidebar tweaks"
      />
    </div>
    <figcaption>Settings sidebar tweaks</figcaption>
  </figure>
</CaseStudyLayout>
